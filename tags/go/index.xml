<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>go - 标签 - zJxin</title>
        <link>https://heisenbergv.github.io/tags/go/</link>
        <description>go - 标签 - zJxin</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>zuojxin@hotmail.com (zJxin)</managingEditor>
            <webMaster>zuojxin@hotmail.com (zJxin)</webMaster><lastBuildDate>Wed, 04 Jan 2023 00:00:00 &#43;0000</lastBuildDate><atom:link href="https://heisenbergv.github.io/tags/go/" rel="self" type="application/rss+xml" /><item>
    <title>crawlergo源码</title>
    <link>https://heisenbergv.github.io/posts/2023/20230104/</link>
    <pubDate>Wed, 04 Jan 2023 00:00:00 &#43;0000</pubDate>
    <author>zJxin</author>
    <guid>https://heisenbergv.github.io/posts/2023/20230104/</guid>
    <description><![CDATA[目录 ├─cmd │ └─main.go # 程序主入口 └─pkg ├─config # 一些配置相关 ├─engine # chrome相关程序 ├─filter]]></description>
</item>
<item>
    <title>vscode&#43;dlv 远程调试</title>
    <link>https://heisenbergv.github.io/posts/2021/20210813-dlv/</link>
    <pubDate>Fri, 13 Aug 2021 00:00:00 &#43;0000</pubDate>
    <author>zJxin</author>
    <guid>https://heisenbergv.github.io/posts/2021/20210813-dlv/</guid>
    <description><![CDATA[dlv在服务器排查程序问题，没有可视化界面比较繁琐，利用vscode+dlv 远程调试，就和在本地调试一样简单 安装 在服务器和本地开发环境都要安]]></description>
</item>
<item>
    <title>gin源码</title>
    <link>https://heisenbergv.github.io/posts/2021/20210721-gin/</link>
    <pubDate>Wed, 21 Jul 2021 00:00:00 &#43;0000</pubDate>
    <author>zJxin</author>
    <guid>https://heisenbergv.github.io/posts/2021/20210721-gin/</guid>
    <description><![CDATA[gin是go开发的一个开源高性能http框架，其主要是把go官方的net/http进行了扩展，前缀树实现了动态路由、支持了中间件、对请求信息]]></description>
</item>
<item>
    <title>源码阅读 - go Context</title>
    <link>https://heisenbergv.github.io/posts/2020/20200401-go-context/</link>
    <pubDate>Wed, 01 Apr 2020 00:00:00 &#43;0000</pubDate>
    <author>zJxin</author>
    <guid>https://heisenbergv.github.io/posts/2020/20200401-go-context/</guid>
    <description><![CDATA[Context有什么用 当处理一个请求A，而这个请求需要在3秒内完成相应，A请求分别创建了B和C goroutine来处理逻辑，如果B或者C处理]]></description>
</item>
<item>
    <title>Go Channel</title>
    <link>https://heisenbergv.github.io/posts/2019/20190917-go-channel/</link>
    <pubDate>Tue, 17 Sep 2019 00:00:00 &#43;0000</pubDate>
    <author>zJxin</author>
    <guid>https://heisenbergv.github.io/posts/2019/20190917-go-channel/</guid>
    <description><![CDATA[如何使用 channel在&lt;-左边 表示向channel发送数据 channel在&lt;-右边 表示从channel接收数据 close(channelName) 关闭一个cha]]></description>
</item>
<item>
    <title>Go Groutine</title>
    <link>https://heisenbergv.github.io/posts/2019/20190917-go-groutine/</link>
    <pubDate>Tue, 17 Sep 2019 00:00:00 &#43;0000</pubDate>
    <author>zJxin</author>
    <guid>https://heisenbergv.github.io/posts/2019/20190917-go-groutine/</guid>
    <description><![CDATA[并发与并行 并行(parallel): 指在同一时刻,有多条指令在多个处理器上同时执行(靠机器) 并发(concurrency): 指在同一时刻只能]]></description>
</item>
<item>
    <title>Go 竞态问题</title>
    <link>https://heisenbergv.github.io/posts/2019/20190903-go-race-condition/</link>
    <pubDate>Tue, 03 Sep 2019 00:00:00 &#43;0000</pubDate>
    <author>zJxin</author>
    <guid>https://heisenbergv.github.io/posts/2019/20190903-go-race-condition/</guid>
    <description><![CDATA[定义 单处理器中低优先级的进程被高优先级的进程抢占，同时他们访问同一块共享资源 多处理器中，CPU1的进程、CPU2的进程同时访问同一块共享资源]]></description>
</item>
</channel>
</rss>
