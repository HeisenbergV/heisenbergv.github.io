<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>源码 - 标签 - zJxin</title>
        <link>https://heisenbergv.github.io/tags/%E6%BA%90%E7%A0%81/</link>
        <description>源码 - 标签 - zJxin</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>zuojxin@hotmail.com (zJxin)</managingEditor>
            <webMaster>zuojxin@hotmail.com (zJxin)</webMaster><lastBuildDate>Wed, 21 Jul 2021 00:00:00 &#43;0000</lastBuildDate><atom:link href="https://heisenbergv.github.io/tags/%E6%BA%90%E7%A0%81/" rel="self" type="application/rss+xml" /><item>
    <title>gin源码</title>
    <link>https://heisenbergv.github.io/posts/2021/20210721-gin/</link>
    <pubDate>Wed, 21 Jul 2021 00:00:00 &#43;0000</pubDate>
    <author>zJxin</author>
    <guid>https://heisenbergv.github.io/posts/2021/20210721-gin/</guid>
    <description><![CDATA[gin是go开发的一个开源高性能http框架，其主要是把go官方的net/http进行了扩展，前缀树实现了动态路由、支持了中间件、对请求信息]]></description>
</item>
<item>
    <title>grpc-go</title>
    <link>https://heisenbergv.github.io/posts/2021/20210119-grpc/</link>
    <pubDate>Tue, 19 Jan 2021 00:00:00 &#43;0000</pubDate>
    <author>zJxin</author>
    <guid>https://heisenbergv.github.io/posts/2021/20210119-grpc/</guid>
    <description><![CDATA[grpc Server 本文简单阅读源代码，了解grpc server的执行流程，从建立连接，到处理一条请求的过程。 使用方式 使用方式很简单，生成pb，注册建立服务]]></description>
</item>
<item>
    <title>源码阅读 - go Context</title>
    <link>https://heisenbergv.github.io/posts/2020/20200401-go-context/</link>
    <pubDate>Wed, 01 Apr 2020 00:00:00 &#43;0000</pubDate>
    <author>zJxin</author>
    <guid>https://heisenbergv.github.io/posts/2020/20200401-go-context/</guid>
    <description><![CDATA[Context有什么用 当处理一个请求A，而这个请求需要在3秒内完成相应，A请求分别创建了B和C goroutine来处理逻辑，如果B或者C处理]]></description>
</item>
</channel>
</rss>
